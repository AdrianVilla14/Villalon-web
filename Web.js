import React, { useEffect, useMemo, useState, useContext, createContext } from "react"; import { BrowserRouter as Router, Routes, Route, Link, Navigate, useNavigate, useLocation } from "react-router-dom"; import { motion, AnimatePresence } from "framer-motion"; import { ShoppingCart, LogIn, LogOut, UserPlus, Shirt, MugHot, ShoppingBag, Store, Settings, ShieldCheck, Package, PlusCircle, Trash2, Pencil, Search } from "lucide-react";

/*************************** Minimal localStorage helper ****************************/ const storage = { get(key, fallback) { try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; } catch { return fallback; } }, set(key, value) { localStorage.setItem(key, JSON.stringify(value)); }, };

/*************************** Seed data (runs once) ****************************/ const DEFAULT_PRODUCTS = [ { id: "tee-001", title: "Classic Tee", category: "tshirts", price: 19.99, img: "https://picsum.photos/seed/tee1/600/400", colors: ["White", "Black", "Sky"], sizes: ["S", "M", "L", "XL"], description: "Soft cotton t‑shirt for everyday comfort.", }, { id: "tee-002", title: "Graphic Tee", category: "tshirts", price: 24.0, img: "https://picsum.photos/seed/tee2/600/400", colors: ["White", "Black"], sizes: ["S", "M", "L"], description: "Bold print, relaxed fit.", }, { id: "mug-001", title: "Ceramic Mug", category: "mugs", price: 12.5, img: "https://picsum.photos/seed/mug1/600/400", colors: ["White", "Navy"], sizes: ["12oz", "16oz"], description: "Dishwasher‑safe ceramic mug.", }, { id: "pants-001", title: "Chino Pants", category: "pants", price: 39.99, img: "https://picsum.photos/seed/pants1/600/400", colors: ["Khaki", "Navy", "Black"], sizes: ["30", "32", "34", "36"], description: "Slim fit chinos with stretch.", }, { id: "hat-001", title: "Baseball Cap", category: "hats", price: 18.75, img: "https://picsum.photos/seed/hat1/600/400", colors: ["Black", "Red", "Olive"], sizes: ["OS"], description: "Adjustable strap, breathable panels.", }, { id: "mug-002", title: "Travel Mug", category: "mugs", price: 22.0, img: "https://picsum.photos/seed/mug2/600/400", colors: ["Silver", "Black"], sizes: ["16oz"], description: "Double‑wall insulated steel.", }, { id: "pants-002", title: "Joggers", category: "pants", price: 34.5, img: "https://picsum.photos/seed/pants2/600/400", colors: ["Gray", "Black"], sizes: ["S", "M", "L", "XL"], description: "Cozy fleece joggers with cuffed hems.", }, { id: "hat-002", title: "Beanie", category: "hats", price: 16.0, img: "https://picsum.photos/seed/hat2/600/400", colors: ["Black", "Mustard"], sizes: ["OS"], description: "Rib knit beanie for cooler days.", }, ];

if (!localStorage.getItem("products")) { storage.set("products", DEFAULT_PRODUCTS); } if (!localStorage.getItem("orders")) { storage.set("orders", []); } if (!localStorage.getItem("users")) { storage.set("users", [ // Default admin (login only; customers must sign up) { id: "admin-1", email: "admin@shop.com", password: "admin123", role: "admin" }, ]); }

/*************************** Auth context (very simple demo) ****************************/ const AuthContext = createContext(null); const useAuth = () => useContext(AuthContext);

function AuthProvider({ children }) { const [user, setUser] = useState(storage.get("currentUser", null));

const login = (email, password) => { const users = storage.get("users", []); const found = users.find((u) => u.email === email && u.password === password); if (found) { setUser(found); storage.set("currentUser", found); return { ok: true, role: found.role }; } return { ok: false }; };

const logout = () => { setUser(null); localStorage.removeItem("currentUser"); };

const signup = (email, password) => { const users = storage.get("users", []); if (users.find((u) => u.email === email)) return { ok: false, msg: "Email already exists" }; const newUser = { id: crypto.randomUUID(), email, password, role: "customer" }; users.push(newUser); storage.set("users", users); setUser(newUser); storage.set("currentUser", newUser); return { ok: true }; };

const value = { user, login, logout, signup }; return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>; }

/*************************** Cart context ****************************/ const CartContext = createContext(null); const useCart = () => useContext(CartContext);

function CartProvider({ children }) { const [cart, setCart] = useState(storage.get("cart", []));

useEffect(() => { storage.set("cart", cart); }, [cart]);

const add = (item, qty = 1, variant = {}) => { setCart((c) => { const key = ${item.id}-${variant.size ?? ""}-${variant.color ?? ""}; const existing = c.find((i) => i.key === key); if (existing) { return c.map((i) => (i.key === key ? { ...i, qty: i.qty + qty } : i)); } return [ ...c, { key, id: item.id, title: item.title, price: item.price, img: item.img, qty, variant, }, ]; }); };

const remove = (key) => setCart((c) => c.filter((i) => i.key !== key)); const setQty = (key, qty) => setCart((c) => c.map((i) => (i.key === key ? { ...i, qty } : i))); const clear = () => setCart([]); const total = cart.reduce((sum, i) => sum + i.price * i.qty, 0);

return ( <CartContext.Provider value={{ cart, add, remove, setQty, clear, total }}> {children} </CartContext.Provider> ); }

/*************************** UI helpers ****************************/ const Container = ({ children }) => (

  <div className="mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8">{children}</div>
);const Badge = ({ children }) => ( <span className="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700 border border-gray-200"> {children} </span> );

function Header() { const { user, logout } = useAuth(); const { cart } = useCart(); const cartCount = cart.reduce((n, i) => n + i.qty, 0);

return ( <header className="sticky top-0 z-50 w-full border-b bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60"> <Container> <div className="flex h-16 items-center justify-between"> <Link to="/" className="flex items-center gap-2"> <Store className="h-6 w-6" /> <span className="font-semibold tracking-tight">LightShop</span> </Link> <nav className="hidden md:flex items-center gap-6 text-sm"> <NavLink to="/shop" label="Shop" /> <NavLink to="/shop/tshirts" label="T‑Shirts" icon={<Shirt className="h-4 w-4" />} /> <NavLink to="/shop/mugs" label="Mugs" icon={<MugHot className="h-4 w-4" />} /> <NavLink to="/shop/pants" label="Pants" /> <NavLink to="/shop/hats" label="Hats" /> </nav> <div className="flex items-center gap-3"> {user ? ( <> {user.role === "admin" && ( <Link to="/admin" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"> <ShieldCheck className="h-4 w-4" /> Admin </Link> )} <button onClick={logout} className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"> <LogOut className="h-4 w-4" /> <span className="hidden sm:inline">Logout</span> </button> </> ) : ( <> <Link to="/login" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"> <LogIn className="h-4 w-4" /> <span className="hidden sm:inline">Login</span> </Link> <Link to="/signup" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"> <UserPlus className="h-4 w-4" /> <span className="hidden sm:inline">Sign Up</span> </Link> </> )} <Link to="/cart" className="relative rounded-xl border px-3 py-2 hover:bg-gray-50"> <ShoppingCart className="h-5 w-5" /> {cartCount > 0 && ( <span className="absolute -right-1 -top-1 rounded-full bg-black px-1.5 text-[10px] font-semibold text-white"> {cartCount} </span> )} </Link> </div> </div> </Container> </header> ); }

function NavLink({ to, label, icon }) { const location = useLocation(); const active = location.pathname === to; return ( <Link to={to} className={inline-flex items-center gap-2 rounded-lg px-2 py-1.5 ${ active ? "bg-gray-100" : "hover:bg-gray-50" }} > {icon} {label} </Link> ); }

function Footer() { return ( <footer className="border-t bg-white"> <Container> <div className="flex flex-col sm:flex-row items-center justify-between gap-4 py-8 text-sm text-gray-600"> <p>© {new Date().getFullYear()} LightShop. All rights reserved.</p> <div className="flex items-center gap-3"> <Badge>Light theme</Badge> <Badge>Responsive</Badge> <Badge>Demo Only</Badge> </div> </div> </Container> </footer> ); }

/*************************** Pages ****************************/ function Home() { return ( <main> <section className="bg-gradient-to-b from-white to-gray-50"> <Container> <div className="grid lg:grid-cols-2 gap-10 py-16"> <div className="flex flex-col justify-center"> <h1 className="text-3xl sm:text-4xl lg:text-5xl font-semibold tracking-tight text-gray-900"> Fresh fits, cozy sips. </h1> <p className="mt-4 text-gray-600 text-lg"> Shop t‑shirts, mugs, pants, and hats with a clean, light look. Simple checkout, fast demo. </p> <div className="mt-6 flex gap-3"> <Link to="/shop" className="rounded-2xl bg-black px-5 py-3 text-white text-sm font-medium hover:bg-gray-800">Browse Shop</Link> <Link to="/signup" className="rounded-2xl border px-5 py-3 text-sm font-medium hover:bg-gray-50">Create Account</Link> </div> </div> <div className="relative"> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="aspect-[4/3] w-full rounded-3xl border bg-white shadow-sm" style={{ backgroundImage: "linear-gradient(135deg,#f5f5f5 0%,#ffffff 60%)" }} > <div className="absolute inset-0 grid grid-cols-2 gap-4 p-6"> <HeroCard icon={<Shirt />} title="T‑Shirts" path="/shop/tshirts"/> <HeroCard icon={<MugHot />} title="Mugs" path="/shop/mugs"/> <HeroCard icon={<ShoppingBag />} title="Pants" path="/shop/pants"/> <HeroCard icon={<Package />} title="Hats" path="/shop/hats"/> </div> </motion.div> </div> </div> </Container> </section> <Featured /> </main> ); }

function HeroCard({ icon, title, path }) { return ( <Link to={path} className="group flex flex-col items-start justify-between rounded-2xl border bg-white p-5 shadow-sm hover:shadow transition"> <div className="rounded-xl border bg-gray-50 p-3 mb-8 group-hover:bg-gray-100">{icon}</div> <div> <h3 className="text-lg font-semibold">{title}</h3> <p className="text-sm text-gray-600">Shop now →</p> </div> </Link> ); }

function Featured() { const products = storage.get("products", []); const picks = products.slice(0, 4); return ( <section className="py-12"> <Container> <div className="flex items-center justify-between mb-6"> <h2 className="text-xl sm:text-2xl font-semibold">Featured</h2> <Link to="/shop" className="text-sm text-gray-600 hover:text-gray-900">View all</Link> </div> <ProductGrid items={picks} /> </Container> </section> ); }

function Shop() { const { search } = useLocation(); const products = storage.get("products", []); const params = new URLSearchParams(search); const q = (params.get("q") ?? "").toLowerCase(); const items = products.filter( (p) => p.title.toLowerCase().includes(q) || p.category.toLowerCase().includes(q) );

return ( <Container> <div className="py-8"> <div className="mb-6 flex flex-col sm:flex-row items-center justify-between gap-3"> <h1 className="text-2xl font-semibold">Shop</h1> <SearchBar /> </div> <CategoryTabs /> <ProductGrid items={items} /> </div> </Container> ); }

function CategoryPage({ category }) { const products = storage.get("products", []); const items = products.filter((p) => p.category === category);

return ( <Container> <div className="py-8"> <div className="mb-6 flex items-center justify-between"> <h1 className="text-2xl font-semibold capitalize">{category}</h1> <SearchBar /> </div> <CategoryTabs active={category} /> <ProductGrid items={items} /> </div> </Container> ); }

function SearchBar() { const navigate = useNavigate(); const [value, setValue] = useState(""); return ( <div className="flex w-full sm:w-80 items-center gap-2 rounded-2xl border bg-white px-3 py-2"> <Search className="h-4 w-4 text-gray-500" /> <input value={value} onChange={(e) => setValue(e.target.value)} onKeyDown={(e) => e.key === "Enter" && navigate(/shop?q=${encodeURIComponent(value)})} placeholder="Search products..." className="w-full bg-transparent text-sm outline-none placeholder:text-gray-400" /> </div> ); }

function CategoryTabs({ active }) { const tabs = [ { key: "tshirts", label: "T‑Shirts", icon: <Shirt className="h-4 w-4" /> }, { key: "mugs", label: "Mugs", icon: <MugHot className="h-4 w-4" /> }, { key: "pants", label: "Pants" }, { key: "hats", label: "Hats" }, ]; return ( <div className="mb-6 flex flex-wrap items-center gap-2"> <Link to="/shop" className={rounded-full border px-4 py-2 text-sm ${!active ? "bg-gray-100" : "hover:bg-gray-50"}}>All</Link> {tabs.map((t) => ( <Link key={t.key} to={/shop/${t.key}} className={rounded-full border px-4 py-2 text-sm inline-flex items-center gap-2 ${active === t.key ? "bg-gray-100" : "hover:bg-gray-50"}}> {t.icon} {t.label} </Link> ))} </div> ); }

function ProductGrid({ items }) { const { add } = useCart(); return ( <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"> {items.map((p) => ( <div key={p.id} className="group rounded-2xl border bg-white shadow-sm overflow-hidden flex flex-col"> <div className="aspect-[4/3] overflow-hidden bg-gray-100"> <img src={p.img} alt={p.title} className="h-full w-full object-cover transition group-hover:scale-105" /> </div> <div className="p-4 flex flex-col gap-2"> <h3 className="font-semibold leading-tight">{p.title}</h3> <p className="text-sm text-gray-600 line-clamp-2">{p.description}</p> <div className="mt-2 flex items-center justify-between"> <span className="font-semibold">${p.price.toFixed(2)}</span> <button onClick={() => add(p, 1)} className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50" > Add to Cart </button> </div> </div> </div> ))} </div> ); }

function CartPage() { const { cart, remove, setQty, total } = useCart(); const navigate = useNavigate(); return ( <Container> <div className="py-8"> <h1 className="text-2xl font-semibold mb-6">Your Cart</h1> {cart.length === 0 ? ( <div className="rounded-2xl border p-6 text-center text-gray-600">Your cart is empty.</div> ) : ( <div className="grid lg:grid-cols-3 gap-6"> <div className="lg:col-span-2 rounded-2xl border divide-y"> {cart.map((i) => ( <div key={i.key} className="flex items-center gap-4 p-4"> <img src={i.img} alt="" className="h-20 w-24 rounded-lg object-cover border" /> <div className="flex-1"> <div className="font-medium">{i.title}</div> <div className="text-sm text-gray-600">{i.variant.size || ""} {i.variant.color || ""}</div> </div> <div className="flex items-center gap-2"> <input type="number" min={1} value={i.qty} onChange={(e) => setQty(i.key, Math.max(1, Number(e.target.value)))} className="w-16 rounded-lg border px-2 py-1 text-sm" /> <button onClick={() => remove(i.key)} className="rounded-lg border px-2 py-1 hover:bg-gray-50"> <Trash2 className="h-4 w-4" /> </button> </div> <div className="w-20 text-right font-semibold">${(i.price * i.qty).toFixed(2)}</div> </div> ))} </div> <div className="rounded-2xl border p-4 h-fit sticky top-24"> <div className="flex items-center justify-between mb-3"> <span className="text-sm text-gray-600">Subtotal</span> <span className="font-semibold">${total.toFixed(2)}</span> </div> <button onClick={() => navigate("/checkout")} className="w-full rounded-2xl bg-black px-4 py-3 text-white text-sm font-medium hover:bg-gray-800"> Place Order </button> <p className="mt-2 text-xs text-gray-500">Taxes & shipping calculated at checkout.</p> </div> </div> )} </div> </Container> ); }

function CheckoutPage() { const { user } = useAuth(); const { cart, total, clear } = useCart(); const navigate = useNavigate();

useEffect(() => { if (cart.length === 0) navigate("/cart"); }, [cart, navigate]);

const [form, setForm] = useState({ name: "", address: "", city: "", zip: "", card: "", });

const placeOrder = () => { const orders = storage.get("orders", []); const newOrder = { id: crypto.randomUUID(), user: user ? user.email : "guest", items: cart, total, placedAt: new Date().toISOString(), shipping: form, status: "processing", }; orders.push(newOrder); storage.set("orders", orders); clear(); navigate(/order/${newOrder.id}); };

return ( <Container> <div className="py-8"> <h1 className="text-2xl font-semibold mb-6">Checkout</h1> <div className="grid lg:grid-cols-3 gap-6"> <div className="lg:col-span-2 rounded-2xl border p-4"> {!user && ( <div className="mb-4 rounded-xl border bg-gray-50 p-3 text-sm text-gray-700"> Tip: <Link to="/login" className="underline">Log in</Link> or <Link to="/signup" className="underline">sign up</Link> to save your order history. </div> )} <div className="grid sm:grid-cols-2 gap-4"> {[ ["name", "Full name"], ["address", "Street address"], ["city", "City"], ["zip", "ZIP / Postal"], ["card", "Card number"], ].map(([key, label]) => ( <div key={key} className={key === "card" ? "sm:col-span-2" : ""}> <label className="mb-1 block text-sm text-gray-600">{label}</label> <input value={form[key]} onChange={(e) => setForm({ ...form, [key]: e.target.value })} placeholder={label} className="w-full rounded-xl border px-3 py-2 text-sm" /> </div> ))} </div> <button onClick={placeOrder} className="mt-4 w-full rounded-2xl bg-black px-4 py-3 text-white text-sm font-medium hover:bg-gray-800"> Place Order </button> </div> <SummaryCard /> </div> </div> </Container> ); }

function SummaryCard() { const { cart, total } = useCart(); return ( <div className="rounded-2xl border p-4 h-fit"> <h3 className="mb-3 font-semibold">Order Summary</h3> <div className="space-y-2 text-sm"> {cart.map((i) => ( <div key={i.key} className="flex items-center justify-between"> <span className="text-gray-600">{i.title} × {i.qty}</span> <span className="font-medium">${(i.price * i.qty).toFixed(2)}</span> </div> ))} <div className="flex items-center justify-between border-t pt-2"> <span className="text-gray-600">Subtotal</span> <span className="font-semibold">${total.toFixed(2)}</span> </div> </div> </div> ); }

function OrderPlaced() { const { id } = useParamsSafe(); const order = storage.get("orders", []).find((o) => o.id === id); if (!order) return ( <Container> <div className="py-8"><div className="rounded-2xl border p-6">Order not found.</div></div> </Container> ); return ( <Container> <div className="py-8"> <div className="rounded-2xl border p-6"> <h1 className="text-2xl font-semibold mb-2">Thank you! 🎉</h1> <p className="text-gray-600 mb-4">Your order <span className="font-mono">#{order.id.slice(0,8)}</span> has been placed.</p> <Link to="/shop" className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50">Continue shopping</Link> </div> </div> </Container> ); }

/*************************** Auth Pages ****************************/ function LoginPage() { const { login } = useAuth(); const navigate = useNavigate(); const [email, setEmail] = useState(""); const [password, setPassword] = useState(""); const [error, setError] = useState("");

const submit = (e) => { e.preventDefault(); const res = login(email, password); if (!res.ok) return setError("Invalid credentials"); if (res.role === "admin") navigate("/admin"); else navigate("/"); };

return ( <AuthCard title="Login" subtitle="Customers can login, admin has login only."> <form onSubmit={submit} className="space-y-3"> <Input label="Email" value={email} onChange={setEmail} type="email" /> <Input label="Password" value={password} onChange={setPassword} type="password" /> {error && <div className="rounded-lg bg-red-50 px-3 py-2 text-sm text-red-700">{error}</div>} <button className="w-full rounded-2xl bg-black px-4 py-3 text-white text-sm font-medium hover:bg-gray-800"> Login </button> <p className="text-xs text-gray-600"> Admin demo: <span className="font-mono">admin@shop.com / admin123</span> </p> </form> </AuthCard> ); }

function SignupPage() { const { signup } = useAuth(); const navigate = useNavigate(); const [email, setEmail] = useState(""); const [password, setPassword] = useState(""); const [error, setError] = useState("");

const submit = (e) => { e.preventDefault(); const res = signup(email, password); if (!res.ok) return setError(res.msg || "Could not sign up"); navigate("/"); };

return ( <AuthCard title="Create account" subtitle="Sign up to save orders & speed up checkout."> <form onSubmit={submit} className="space-y-3"> <Input label="Email" value={email} onChange={setEmail} type="email" /> <Input label="Password" value={password} onChange={setPassword} type="password" /> {error && <div className="rounded-lg bg-red-50 px-3 py-2 text-sm text-red-700">{error}</div>} <button className="w-full rounded-2xl bg-black px-4 py-3 text-white text-sm font-medium hover:bg-gray-800"> Sign Up </button> <p className="text-xs text-gray-600">Already have an account? <Link to="/login" className="underline">Log in</Link></p> </form> </AuthCard> ); }

function AuthCard({ title, subtitle, children }) { return ( <Container> <div className="py-12 max-w-md mx-auto"> <div className="rounded-3xl border bg-white p-6 shadow-sm"> <h1 className="text-2xl font-semibold mb-1">{title}</h1> <p className="text-sm text-gray-600 mb-6">{subtitle}</p> {children} </div> </div> </Container> ); }

function Input({ label, value, onChange, type = "text" }) { return ( <div> <label className="mb-1 block text-sm text-gray-600">{label}</label> <input value={value} onChange={(e) => onChange(e.target.value)} type={type} placeholder={label} className="w-full rounded-xl border px-3 py-2 text-sm" /> </div> ); }

/*************************** Admin (login only) ****************************/ function AdminRoute({ children }) { const { user } = useAuth(); if (!user) return <Navigate to="/login" replace />; if (user.role !== "admin") return <Navigate to="/" replace />; return children; }

function AdminPage() { const { user } = useAuth(); const [tab, setTab] = useState("orders");

return ( <Container> <div className="py-8"> <div className="mb-6 flex items-center justify-between"> <h1 className="text-2xl font-semibold flex items-center gap-2"><ShieldCheck className="h-6 w-6"/>Admin</h1> <div className="text-sm text-gray-600">Logged in as <span className="font-medium">{user.email}</span></div> </div> <div className="mb-6 flex items-center gap-2"> <button onClick={() => setTab("orders")} className={rounded-full border px-4 py-2 text-sm ${tab === "orders" ? "bg-gray-100" : "hover:bg-gray-50"}}>Orders</button> <button onClick={() => setTab("products")} className={rounded-full border px-4 py-2 text-sm ${tab === "products" ? "bg-gray-100" : "hover:bg-gray-50"}}>Products</button> <button onClick={() => setTab("users")} className={rounded-full border px-4 py-2 text-sm ${tab === "users" ? "bg-gray-100" : "hover:bg-gray-50"}}>Users</button> </div> {tab === "orders" && <AdminOrders />} {tab === "products" && <AdminProducts />} {tab === "users" && <AdminUsers />} </div> </Container> ); }

function AdminOrders() { const [orders, setOrders] = useState(storage.get("orders", [])); useEffect(() => { const onStorage = () => setOrders(storage.get("orders", [])); window.addEventListener("storage", onStorage); return () => window.removeEventListener("storage", onStorage); }, []);

const format = (iso) => new Date(iso).toLocaleString();

return ( <div className="rounded-2xl border overflow-x-auto"> <table className="min-w-full text-sm"> <thead className="bg-gray-50 text-gray-600"> <tr> <th className="p-3 text-left">Order</th> <th className="p-3 text-left">Customer</th> <th className="p-3 text-left">Items</th> <th className="p-3 text-left">Total</th> <th className="p-3 text-left">Placed</th> <th className="p-3 text-left">Status</th> </tr> </thead> <tbody> {orders.length === 0 ? ( <tr> <td className="p-4" colSpan={6}>No orders yet.</td> </tr> ) : ( orders.slice().reverse().map((o) => ( <tr key={o.id} className="border-t"> <td className="p-3 font-mono">#{o.id.slice(0,8)}</td> <td className="p-3">{o.user}</td> <td className="p-3">{o.items.reduce((n,i)=>n+i.qty,0)}</td> <td className="p-3 font-medium">${o.total.toFixed(2)}</td> <td className="p-3">{format(o.placedAt)}</td> <td className="p-3"> <span className="rounded-full border px-3 py-1 text-xs">{o.status}</span> </td> </tr> )) )} </tbody> </table> </div> ); }

function AdminProducts() { const [products, setProducts] = useState(storage.get("products", [])); const [form, setForm] = useState({ title: "", category: "tshirts", price: "", img: "", description: "" });

const addProduct = () => { if (!form.title || !form.price) return; const prod = { id: ${form.category}-${crypto.randomUUID().slice(0,4)}, title: form.title, category: form.category, price: Number(form.price), img: form.img || https://picsum.photos/seed/${Math.random().toString(36).slice(2)}/600/400, colors: ["Default"], sizes: ["OS"], description: form.description || "", }; const next = [...products, prod]; setProducts(next); storage.set("products", next); setForm({ title: "", category: "tshirts", price: "", img: "", description: "" }); };

const removeProduct = (id) => { const next = products.filter((p) => p.id !== id); setProducts(next); storage.set("products", next); };

return ( <div className="grid lg:grid-cols-3 gap-6"> <div className="lg:col-span-2 rounded-2xl border p-4"> <h3 className="font-semibold mb-3">All Products</h3> <div className="grid sm:grid-cols-2 xl:grid-cols-3 gap-4"> {products.map((p) => ( <div key={p.id} className="rounded-xl border overflow-hidden"> <img src={p.img} alt="" className="h-32 w-full object-cover" /> <div className="p-3 text-sm"> <div className="font-medium">{p.title}</div> <div className="text-gray-600">{p.category}</div> <div className="mt-1 font-semibold">${p.price.toFixed(2)}</div> <div className="mt-2 flex items-center gap-2"> <button onClick={() => removeProduct(p.id)} className="inline-flex items-center gap-1 rounded-lg border px-2 py-1 hover:bg-gray-50"><Trash2 className="h-4 w-4"/>Delete</button> </div> </div> </div> ))} </div> </div> <div className="rounded-2xl border p-4 h-fit"> <h3 className="font-semibold mb-3">Add Product</h3> <div className="space-y-3 text-sm"> <div> <label className="mb-1 block text-sm text-gray-600">Title</label> <input value={form.title} onChange={(e)=>setForm({...form,title:e.target.value})} className="w-full rounded-xl border px-3 py-2" /> </div> <div> <label className="mb-1 block text-sm text-gray-600">Category</label> <select value={form.category} onChange={(e)=>setForm({...form,category:e.target.value})} className="w-full rounded-xl border px-3 py-2"> <option value="tshirts">tshirts</option> <option value="mugs">mugs</option> <option value="pants">pants</option> <option value="hats">hats</option> </select> </div> <div> <label className="mb-1 block text-sm text-gray-600">Price</label> <input type="number" step="0.01" value={form.price} onChange={(e)=>setForm({...form,price:e.target.value})} className="w-full rounded-xl border px-3 py-2" /> </div> <div> <label className="mb-1 block text-sm text-gray-600">Image URL</label> <input value={form.img} onChange={(e)=>setForm({...form,img:e.target.value})} className="w-full rounded-xl border px-3 py-2" /> </div> <div> <label className="mb-1 block text-sm text-gray-600">Description</label> <textarea value={form.description} onChange={(e)=>setForm({...form,description:e.target.value})} className="w-full rounded-xl border px-3 py-2" rows={3} /> </div> <button onClick={addProduct} className="w-full rounded-2xl bg-black px-4 py-3 text-white text-sm font-medium hover:bg-gray-800 inline-flex items-center justify-center gap-2"><PlusCircle className="h-4 w-4"/>Add Product</button> </div> </div> </div> ); }

function AdminUsers() { const [users, setUsers] = useState(storage.get("users", [])); return ( <div className="rounded-2xl border overflow-x-auto"> <table className="min-w-full text-sm"> <thead className="bg-gray-50 text-gray-600"> <tr> <th className="p-3 text-left">Email</th> <th className="p-3 text-left">Role</th> </tr> </thead> <tbody> {users.map((u) => ( <tr key={u.id} className="border-t"> <td className="p-3">{u.email}</td> <td className="p-3"> <span className="rounded-full border px-3 py-1 text-xs">{u.role}</span> </td> </tr> ))} </tbody> </table> </div> ); }

/*************************** Utilities ****************************/ function useParamsSafe() { // Tiny helper to get params without importing useParams explicitly in the header const location = useLocation(); const match = location.pathname.match(//order/(.+)$/); return { id: match ? match[1] : null }; }

/*************************** App shell ***************************/ export default function App() { return ( <Router> <AuthProvider> <CartProvider> <div className="min-h-screen bg-white text-gray-900"> <Header /> <AnimatePresence mode="wait"> <Routes> <Route path="/" element={<Home />} /> <Route path="/shop" element={<Shop />} /> <Route path="/shop/tshirts" element={<CategoryPage category="tshirts" />} /> <Route path="/shop/mugs" element={<CategoryPage category="mugs" />} /> <Route path="/shop/pants" element={<CategoryPage category="pants" />} /> <Route path="/shop/hats" element={<CategoryPage category="hats" />} /> <Route path="/cart" element={<CartPage />} /> <Route path="/checkout" element={<CheckoutPage />} /> <Route path="/order/:id" element={<OrderPlaced />} /> <Route path="/login" element={<LoginPage />} /> <Route path="/signup" element={<SignupPage />} /> <Route path="/admin" element={<AdminRoute><AdminPage /></AdminRoute>} /> <Route path="" element={<NotFound />} /> </Routes> </AnimatePresence> <Footer /> </div> </CartProvider> </AuthProvider> </Router> ); }

function NotFound() { return ( <Container> <div className="py-16 text-center"> <h1 className="text-2xl font-semibold mb-2">Page not found</h1> <p className="text-gray-600 mb-6">The page you are looking for does not exist.</p> <Link to="/" className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50">Go home</Link> </div> </Container> ); }

